% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/stochasticmodel_outtheninadjust_pandemictravel.R
\name{stochasticmodel_outtheninadjust_pandemictravel}
\alias{stochasticmodel_outtheninadjust_pandemictravel}
\title{This function gives a stochastic realization for n countries with a given regulated
strategy and quarantine duration required by the destination countries
for each travel out country depends on the situation of the travel out country.
It also kepps track the number of imported active confirmed each day during the
 pandemic and traveler status before and after done quarantine.}
\usage{
stochasticmodel_outtheninadjust_pandemictravel(thetamatrix, inp)
}
\arguments{
\item{thetamatrix}{is a matrix of parameters, parameters of each country is on 1 row}

\item{inp}{is a list include durationtravel : durationtravel (days),
 durationquarantine_adjustedout : number of days people travel in have to quarantine based on each country policy,
 durationquarantine_adjustedout1 : number of days people travel in have to quarantine based on each country not require often 0,
travelregulated: a list of travel allowed from 1 country to another during the duration,
initialmatrix is a matrix of initial compartments of countries, each country is on 1 row, and
quarantinerate is the rate people follow quarantine
countryinrequire is whether a country want the quarantine for people travel in or not, 1 for want,
and 0 if not want}
}
\value{
The a stochastic realization of n countries with travel data regulated, also returns
travelers status before and after quarantine, and active confirm update during the quarantine time
}
\description{
This function gives a stochastic realization for n countries with a given regulated
strategy and quarantine duration required by the destination countries
for each travel out country depends on the situation of the travel out country.
It also kepps track the number of imported active confirmed each day during the
 pandemic and traveler status before and after done quarantine.
}
\examples{
\dontrun{
library(CONETTravel)
######function generating parameters with R0 in a given range
thetagenerating = function(lowerbound, upperbound){
 tmp2 = 1 # need for kick off
 while(tmp2 >0){
   theta = c( alpha0 = 0,alpha = runif(1,0,1),beta = runif(1,0,.25), delta=runif(1,0,.25),
              eta=1, gamma=runif(1,0,1) )
   tmp1 = theta[2]/(theta[3] + theta[6])
   tmp2 = (tmp1 - lowerbound)*(tmp1 - upperbound)
 }
 return(theta)
}
############ function generate theta matrix
numbercountries = 3 # choose the number of countries
thetamatrix = matrix(0, nrow=numbercountries, ncol=6)
for(i in 1:numbercountries){
  thetamatrix[1,] = thetagenerating(1.1,6.47) # R0 belongs to 1.1, 6.47
 thetamatrix[2,] = thetagenerating(1,1.1) # R0 belongs to 1, 1.1
 thetamatrix[3,] = thetagenerating(0.47,1) # R0 belongs to 1, 1.1
}
 ##########initial matrix function
initialmatrix_func =  function(numbercountries){
 initialmatrix = matrix(0, numbercountries, 6)
 for (country in 1:numbercountries){
   P = round(runif(1, 50000, 20000000000), digits=0)
   I = round(runif(1, 0, 2000), digits=0)
   S = P - I
   initialmatrix[country,] = c(S, I, 0, 0,0,0)
 }
 return(initialmatrix)
 }
 ############function generate travel data
traveldata_func = function(P, numbercountries, travelrate, durationtravel){
 traveldata = matrix(0, nrow = durationtravel, ncol = numbercountries)
 for( day in 1:durationtravel){
   for (country in 1:numbercountries){
     Totaltravel = P[country]*travelrate
     SdTotaltravel = Totaltravel*.05
     traveldata[day,country] = round(rnorm(1, Totaltravel, SdTotaltravel), digits=0)
   }
 }
 return(traveldata)
}
numbercountries1 = numbercountries - 1
initial_corona =  initialmatrix_func(numbercountries)
P = rowSums(initial_corona)
travelrate = 40/(365*328) #a given travel rate each day
durationtravel = 84 # number of days travel
travelout_data = traveldata_func(P, numbercountries, travelrate, durationtravel)
 #generate theta matrix for each countries
ratein = 1 # policy that allows full rate of travel in
traveloutDivideRegulated = totaltravelout_samerate_regulated(travelout_data, ratein, P)
inp = list(durationtravel = durationtravel, travelregulated = traveloutDivideRegulated,
          initialmatrix = initial_corona, quarantinerate = 1,
          durationquarantine_adjustedout = rep(14,numbercountries),
          durationquarantine_adjustedout1 = rep(0,numbercountries),
         countryinrequire = c(rep(0,numbercountries1),1))
stochasticmodel_outtheninadjust_pandemictravel(thetamatrix,inp)
}
}
