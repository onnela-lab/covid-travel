% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/stochasticmodel_inadjusted_trafficregulated_quarantine.R
\name{stochasticmodel_inadjusted_trafficregulated_quarantine}
\alias{stochasticmodel_inadjusted_trafficregulated_quarantine}
\title{This function gives stochastic realization for n countries with a given regulated
strategy and quarantine duration that each destination country required for
 all other countries entered it's authority.}
\usage{
stochasticmodel_inadjusted_trafficregulated_quarantine(thetamatrix, inp)
}
\arguments{
\item{thetamatrix}{is a matrix of parameters, parameters of each country is on 1 row}

\item{inp}{is a list include durationtravel : durationtravel (days),
 durationquarantine_adjustedin : number of days people travel in have to quarantine based on each country policy,
travelregulated: a list of travel allowed from 1 country to another during the duration,
initialmatrix is a matrix of initial compartments of countries, each country is on 1 row, and
quarantinerate is the rate people follow quarantine}
}
\value{
The stochastic realization of n countries with travel data regulated and quarantine in
}
\description{
This function gives stochastic realization for n countries with a given regulated
strategy and quarantine duration that each destination country required for
 all other countries entered it's authority.
}
\examples{
\dontrun{
library(CONETTravel)
P1 = 10^7
I1 = 250
A1 = 130
S1 = P1 - I1 - A1
x1 = c(S1,I1,A1,0,0,0) # State corresponding S,I,A,R,D,Ru country 1
P2 = 3*10^6
I2 = 20
A2 = 10
 S2 = P2 - I2 - A2
 x2 = c(S2,I2,A2,0,0,0) # State corresponding S,I,A,R,D,Ru country 2
 P3 = 2*10^6
I3 = 15
A3 = 15
S3 = P3 - I3 - A3
 x3 = c(S3,I3,A3,0,0,0) # State corresponding S,I,A,R,D,Ru country 3
 travelout_data = travelout_3dat
 initial_corona = as.matrix(rbind(x1,x2,x3) )#initial conditions of 3 countries
 P = c(P1, P2, P3) #population 3 countries
 k = 13
 theta0 = rbind(thetas_3travel[[k]][1:6],thetas_3travel[[k]][7:12],thetas_3travel[[k]][13:18])
 ratein = 1 # policy that allows full rate of travel in
 traveloutDivideRegulated = totaltravelout_samerate_regulated(travelout_data, ratein, P)
 inp = list(durationtravel = nrow(travelout_data), travelregulated = traveloutDivideRegulated,
           initialmatrix = initial_corona, quarantinerate = 1, durationquarantine_adjustedin = c(14,14,14))
 stochasticmodel_inadjusted_trafficregulated_quarantine(theta0, inp)
}
}
